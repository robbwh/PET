precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#248#256", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#248#256", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Base.PkgId, Nothing}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Base.PkgId, String}, Int64})
precompile(Tuple{typeof(Revise.iswritable), String})
precompile(Tuple{typeof(Bzip2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(FreeType2_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(EarCut_jll.find_artifact_dir)})
precompile(Tuple{typeof(FriBidi_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libffi_jll.find_artifact_dir)})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Gettext_jll.find_artifact_dir)})
precompile(Tuple{typeof(Glib_jll.find_artifact_dir)})
precompile(Tuple{typeof(Pixman_jll.find_artifact_dir)})
precompile(Tuple{typeof(libpng_jll.find_artifact_dir)})
precompile(Tuple{typeof(Expat_jll.find_artifact_dir)})
precompile(Tuple{typeof(Fontconfig_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(LZO_jll.find_artifact_dir)})
precompile(Tuple{typeof(Cairo_jll.find_artifact_dir)})
precompile(Tuple{typeof(Graphite2_jll.find_artifact_dir)})
precompile(Tuple{typeof(HarfBuzz_jll.find_artifact_dir)})
precompile(Tuple{typeof(libass_jll.find_artifact_dir)})
precompile(Tuple{typeof(libfdk_aac_jll.find_artifact_dir)})
precompile(Tuple{typeof(LAME_jll.find_artifact_dir)})
precompile(Tuple{typeof(Ogg_jll.find_artifact_dir)})
precompile(Tuple{typeof(libvorbis_jll.find_artifact_dir)})
precompile(Tuple{typeof(libaom_jll.find_artifact_dir)})
precompile(Tuple{typeof(x264_jll.find_artifact_dir)})
precompile(Tuple{typeof(x265_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Opus_jll.find_artifact_dir)})
precompile(Tuple{typeof(FFMPEG_jll.find_artifact_dir)})
precompile(Tuple{typeof(Rmath_jll.find_artifact_dir)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{Ratios.var"#9#12"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{Ratios.var"#10#13"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{Ratios.var"#11#14"})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Revise.is_same_file), String, String})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(FFTW_jll.find_artifact_dir)})
precompile(Tuple{typeof(isoband_jll.find_artifact_dir)})
precompile(Tuple{typeof(Qhull_jll.find_artifact_dir)})
precompile(Tuple{typeof(QhullMiniWrapper_jll.find_artifact_dir)})
precompile(Tuple{typeof(Pango_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.signed), UInt32})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{UInt16, UInt16}, Int64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{UInt16, UInt16}, Int64, String}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), Tuple{UInt16, UInt16}, Tuple{UInt16, UInt16}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{typeof(Base.:(==)), Int64, UInt16})
precompile(Tuple{Type{NamedTuple{(:max_group,), T} where T<:Tuple}, Tuple{UInt16}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{NamedTuple{(:capture_data,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Nothing, Bool}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{0}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.IteratorSize, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:capture_data,), Tuple{Bool}}, typeof(Distributed.wrap_on_error), Function, Function})
precompile(Tuple{typeof(Base.:(|)), Base.Missing, Bool})
precompile(Tuple{typeof(Base.axes), Nothing})
precompile(Tuple{typeof(FdgPet.process_data_dir), Vararg{String, 4}})
precompile(Tuple{typeof(DICOM.read_group_tag), Base.IOStream, Symbol})
precompile(Tuple{typeof(DICOM.determine_vr_and_lentype), Base.IOStream, Tuple{UInt16, UInt16}, Bool, Base.Dict{Tuple{UInt16, UInt16}, String}})
precompile(Tuple{typeof(Base.get), Base.Dict{Tuple{UInt16, UInt16}, Array{Any, 1}}, Tuple{UInt16, UInt16}, Array{String, 1}})
precompile(Tuple{typeof(DICOM.order), UInt16, Symbol})
precompile(Tuple{typeof(Base.:(==)), UInt16, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{UInt16, UInt16}, Tuple{UInt16, UInt16}})
precompile(Tuple{typeof(Base.:(==)), UInt16, UInt32})
precompile(Tuple{typeof(DICOM.numeric_parse), Base.IOStream, DataType, UInt16, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{UInt32}, Base.UnitRange{UInt64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt32, 1}, UInt32, Int64})
precompile(Tuple{typeof(DICOM.order), Array{UInt32, 1}, Symbol})
precompile(Tuple{typeof(Base.isodd), UInt16})
precompile(Tuple{typeof(Base.length), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.length), UInt32})
precompile(Tuple{typeof(Base.getindex), UInt32, Int64})
precompile(Tuple{typeof(DICOM.order), UInt32, Symbol})
precompile(Tuple{Type{Array{UInt8, N} where N}, UndefInitializer, UInt32})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt8, 1}})
precompile(Tuple{typeof(DICOM.order), Array{UInt8, 1}, Symbol})
precompile(Tuple{typeof(Base.isodd), UInt32})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(DICOM.string_parse), Base.IOStream, UInt16, Int64, Bool})
precompile(Tuple{typeof(Base.length), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Tuple{Bool, Bool}}, Base.SubString{String}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{UInt16, UInt16}, String}, String, Tuple{UInt16, UInt16}})
precompile(Tuple{typeof(DICOM.sequence_parse), Base.IOStream, UInt32, DICOM.DICOMData})
precompile(Tuple{typeof(Base.:(==)), UInt16, UInt16})
precompile(Tuple{typeof(Base.:(!=)), UInt16, UInt16})
precompile(Tuple{typeof(Base.length), Array{DICOM.DICOMData, 1}})
precompile(Tuple{Type{Array{UInt8, N} where N}, UndefInitializer, UInt16})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.length), Float64})
precompile(Tuple{typeof(Base.getindex), Float64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{UInt16}, Base.UnitRange{UInt64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt16, 1}, UInt16, Int64})
precompile(Tuple{typeof(DICOM.order), Array{UInt16, 1}, Symbol})
precompile(Tuple{typeof(Base.length), Array{UInt16, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt16, 1}, Int64})
precompile(Tuple{typeof(Base.length), UInt16})
precompile(Tuple{typeof(Base.getindex), UInt16, Int64})
precompile(Tuple{typeof(DICOM.pixeldata_parse), Base.IOStream, UInt32, String, DICOM.DICOMData})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{typeof(Base.unlock), Base.ReentrantLock})
precompile(Tuple{typeof(Base.replace), Base.SubString{String}, Pair{String, String}, Pair{Base.Regex, String}})
precompile(Tuple{typeof(FdgPet.process_descriptor), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Tuple{UInt16, UInt16}}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Tuple{UInt16, UInt16}, Any}, Tuple{UInt16, UInt16}})
precompile(Tuple{typeof(Base.string), UInt16})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 4}})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, FdgPet.var"#3#4"}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Filesystem.mv), String, String})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{String, 1}, Array{String, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.arg_gen), String, Base.SubString{String}, Vararg{Any}})
precompile(Tuple{Base.var"#767#768"{Base.Process}})
precompile(Tuple{typeof(Base._array_for), Type{Int16}, Base.UnitRange{UInt64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex!), Array{Int16, 1}, Int16, Int64})
precompile(Tuple{typeof(DICOM.order), Array{Int16, 1}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Int16, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int16, 1}, Int64})
precompile(Tuple{typeof(Base.length), Int16})
precompile(Tuple{typeof(Base.getindex), Int16, Int64})
precompile(Tuple{typeof(Base.append!), Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Array{String, 1}}}, typeof(Base.foldl), Function, NTuple{6, Array{String, 1}}})
precompile(Tuple{Base.var"##mapfoldl#288", Array{String, 1}, typeof(Base.mapfoldl), Function, Function, NTuple{6, Array{String, 1}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.append!), Array{String, 1}, NTuple{6, Array{String, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Array{String, 1}}}, typeof(Base.foldl), Function, NTuple{27, Array{String, 1}}})
precompile(Tuple{Base.var"##mapfoldl#288", Array{String, 1}, typeof(Base.mapfoldl), Function, Function, NTuple{27, Array{String, 1}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.append!), Array{String, 1}, NTuple{27, Array{String, 1}}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Nothing, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Distributed.pmap), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.hash), Distributed.RemoteChannel{Base.Channel{Any}}, UInt64})
precompile(Tuple{typeof(Distributed.def_rv_channel)})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, WeakRef})
precompile(Tuple{typeof(Base.foreach), Base.var"#992#993"{Base.var"#978#983"{typeof(FdgPet._slicepng)}, Nothing, Array{Any, 1}, Base.Channel{Any}}, Base.UnitRange{Int64}})
precompile(Tuple{Base.var"##s88#234", Any, Any, Any})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#235#237"{DataType, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#235#237"{DataType, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.iterate), Int64})
precompile(Tuple{typeof(Base.ntoh), Int32})
precompile(Tuple{typeof(Base.convert), Type{Exception}, ErrorException})
precompile(Tuple{Type{NamedTuple{(:transcode,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:eager,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(TranscodingStreams.throw_panic_error)})
precompile(Tuple{Type{NamedTuple{(:ignore_equal_values,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:priority,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:update, :priority), T} where T<:Tuple}, Tuple{Bool, Int64}})
precompile(Tuple{Type{NamedTuple{(:colormap,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:colormap,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.round), Type, Int64})
precompile(Tuple{Type{NamedTuple{(:visible,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:visible,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:visible,), Tuple{Bool}}})
precompile(Tuple{Base.var"#994#995"{Base.var"#978#983"{typeof(FdgPet._slicepng)}, Base.Channel{Any}, Nothing}})
precompile(Tuple{typeof(Base.maptwice), Function, Base.Channel{Any}, Array{Any, 1}, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#985#987"{Base.Channel{Any}, Array{Any, 1}, Distributed.var"#224#227"{Distributed.WorkerPool}, Base.var"#978#983"{typeof(FdgPet._slicepng)}, Base.var"#984#986"{Base.Channel{Any}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Base.var"#985#987"{Base.Channel{Any}, Array{Any, 1}, Distributed.var"#224#227"{Distributed.WorkerPool}, Base.var"#978#983"{typeof(FdgPet._slicepng)}, Base.var"#984#986"{Base.Channel{Any}}}}})
precompile(Tuple{Base.var"#978#983"{typeof(FdgPet._slicepng)}, Base.RefValue{Any}, Tuple{String}})
precompile(Tuple{typeof(NIfTI.read_volume), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Type{Int16}, Tuple{Int64, Int64, Int64}, Bool})
precompile(Tuple{Type{NIfTI.NIVolume{T, N, R} where R where N where T<:Number}, NIfTI.NIfTI1Header, Array{NIfTI.NIfTIExtension, 1}, Array{Int16, 3}})
precompile(Tuple{typeof(Base.ndims), NIfTI.NIVolume{Int16, 3, Array{Int16, 3}}})
precompile(Tuple{typeof(Base.size), NIfTI.NIVolume{Int16, 3, Array{Int16, 3}}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#73#74"{Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:resolution,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}, Type{Makie.Scene}})
precompile(Tuple{Makie.var"##Scene#108", Nothing, Makie.Events, MakieCore.Automatic, Function, Nothing, Makie.EmptyCamera, Makie.Transformation, Array{MakieCore.AbstractPlot{Typ} where Typ, 1}, Array{Makie.Scene, 1}, Array{MakieCore.MakieScreen, 1}, Nothing, Observables.Observable{Bool}, Makie.SSAO, MakieCore.Automatic, MakieCore.Attributes, Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:resolution,), Tuple{Tuple{Int64, Int64}}}}, Type{Makie.Scene}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Observables.Observable{Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, MakieCore.Attributes})
precompile(Tuple{Type{GeometryBasics.HyperRectangle{2, Int64}}, Vararg{Int64, 4}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{4, 4}, Float32, 2, 16}}, StaticArraysCore.SArray{Tuple{4, 4}, Float32, 2, 16}})
precompile(Tuple{typeof(Base.getproperty), NIfTI.NIVolume{Int16, 3, Array{Int16, 3}}, Symbol})
precompile(Tuple{Base.var"##s970#574", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.getindex), Array{Int16, 3}, Int64, Function, Function})
precompile(Tuple{MakieCore.var"##heatmap!#20", Base.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:colormap,), Tuple{Symbol}}}, typeof(MakieCore.heatmap!), Makie.Scene, Vararg{Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:colormap,), Tuple{Symbol}}, typeof(MakieCore.plot!), Type{MakieCore.Combined{MakieCore.heatmap, ArgType} where ArgType}, Makie.Scene, Array{Int16, 2}})
precompile(Tuple{Makie.var"##convert_arguments#174", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(MakieCore.convert_arguments), Type{MakieCore.Combined{MakieCore.heatmap, Tuple{Array{Int16, 2}}}}, Array{Int16, 2}})
precompile(Tuple{typeof(Observables.onany), Function, Observables.Observable{Tuple{}}, Observables.Observable{Array{Int16, 2}}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Array{Int16, 2}}})
precompile(Tuple{Type{NamedTuple{(:transparency, :overdraw, :visible, :space, :transformation, :inspectable, :model, :depth_shift, :ssao), T} where T<:Tuple}, NTuple{9, Observables.Observable{Any}}})
precompile(Tuple{Type{NamedTuple{(:colormap, :colorrange, :lowclip, :highclip, :nan_color, :linewidth, :interpolate, :levels, :fxaa, :inspectable, :space), T} where T<:Tuple}, Tuple{Observables.Observable{Any}, MakieCore.Automatic, MakieCore.Automatic, MakieCore.Automatic, Symbol, Float64, Bool, Int64, Bool, Observables.Observable{Any}, Symbol}})
precompile(Tuple{Type{GeometryBasics.Vec{2, Float32}}, Tuple{Float32, Float32}})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:PNG}, Name} where Name}, String})
precompile(Tuple{typeof(Base.:(*)), UInt16, Int64})
precompile(Tuple{typeof(Base.round), Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(FixedPointNumbers._unsafe_trunc), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{FixedPointNumbers.Normed{UInt8, 8}}, UInt8})
precompile(Tuple{typeof(Base.cconvert), Type, Float64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(FileIO.save), FileIO.File{FileIO.DataFormat{:PNG}, String}, Makie.Scene})
precompile(Tuple{Base.var"##open#409", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Makie.var"#1023#1024"{Module, Bool, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Makie.Scene, Base.Multimedia.MIME{Symbol("image/png")}, Makie.Scene}, String, Vararg{String}})
precompile(Tuple{Makie.var"##getscreen#1027", Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:visible,), Tuple{Bool}}}, typeof(Makie.getscreen), Module, Makie.Scene, Base.IOStream, Vararg{Any}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{typeof(Makie.merge_screen_config), Type{CairoMakie.ScreenConfig}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:visible,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.map), Makie.var"#1017#1018"{NamedTuple{(:visible,), Tuple{Bool}}, MakieCore.Attributes}, NTuple{5, Symbol}})
precompile(Tuple{typeof(Cairo.write_to_stream_callback), Base.IOStream, Ptr{UInt8}, UInt32})
precompile(Tuple{Type{CairoMakie.Screen{SurfaceRenderType} where SurfaceRenderType}, Makie.Scene, CairoMakie.ScreenConfig, Base.IOStream, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Makie.backend_show), CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, Base.IOStream, Base.Multimedia.MIME{Symbol("image/png")}, Makie.Scene})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{GeometryBasics.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.getindex), GeometryBasics.Vec{3, Float32}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float32})
precompile(Tuple{typeof(Base.get), MakieCore.Combined{MakieCore.heatmap, Tuple{Array{Float32, 1}, Array{Float32, 1}, Array{Float32, 2}}}, Symbol, Bool})
precompile(Tuple{typeof(Base.getindex), MakieCore.Combined{MakieCore.heatmap, Tuple{Array{Float32, 1}, Array{Float32, 1}, Array{Float32, 2}}}, Int64})
precompile(Tuple{typeof(Base.first), Base.StepRangeLen{Float32, Float64, Float64, Int64}})
precompile(Tuple{typeof(Base.last), Base.StepRangeLen{Float32, Float64, Float64, Int64}})
precompile(Tuple{typeof(Base.get), MakieCore.Combined{MakieCore.heatmap, Tuple{Array{Float32, 1}, Array{Float32, 1}, Array{Float32, 2}}}, Symbol, Symbol})
precompile(Tuple{typeof(CairoMakie.project_position), Makie.Scene, typeof(Base.identity), Symbol, GeometryBasics.Point{2, Float32}, StaticArraysCore.SArray{Tuple{4, 4}, Float32, 2, 16}, Bool})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}}}}})
precompile(Tuple{typeof(Makie.to_color), ColorTypes.RGBA{Float32}})
precompile(Tuple{typeof(Cairo.write_to_png), Cairo.CairoSurfaceImage{ColorTypes.ARGB32}, Base.IOStream})
precompile(Tuple{typeof(NIfTI.read_volume), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Type{Float32}, Tuple{Int64, Int64, Int64}, Bool})
precompile(Tuple{typeof(Base.:(*)), Float32, Float32})
precompile(Tuple{Type{NIfTI.NIVolume{T, N, R} where R where N where T<:Number}, NIfTI.NIfTI1Header, Array{NIfTI.NIfTIExtension, 1}, Array{Float32, 3}})
precompile(Tuple{typeof(Base.ndims), NIfTI.NIVolume{Float32, 3, Array{Float32, 3}}})
precompile(Tuple{typeof(Base.size), NIfTI.NIVolume{Float32, 3, Array{Float32, 3}}})
precompile(Tuple{typeof(Base.getproperty), NIfTI.NIVolume{Float32, 3, Array{Float32, 3}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Float32, 3}, Int64, Function, Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:colormap,), Tuple{Symbol}}, typeof(MakieCore.plot!), Type{MakieCore.Combined{MakieCore.heatmap, ArgType} where ArgType}, Makie.Scene, Array{Float32, 2}})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceImage{UInt32}})
precompile(Tuple{typeof(Observables.onany), Function, Observables.Observable{Tuple{}}, Observables.Observable{Array{Float32, 2}}})
precompile(Tuple{typeof(NIfTI.to_eltype_error), Any})
precompile(Tuple{typeof(Base.string), String, Int16, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int16})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{Base.var"#988#990", Task})
precompile(Tuple{typeof(Base.map), Function, Array{Base.RefValue{Any}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#989#991", Array{Base.RefValue{Any}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.RefValue{Any}, 1}, Base.Generator{Array{Base.RefValue{Any}, 1}, Base.var"#989#991"}})
precompile(Tuple{Type{Array{CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, 1}, CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, Base.Generator{Array{Base.RefValue{Any}, 1}, Base.var"#989#991"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base._promote_typesubtract), Any})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}}, 1}, Base.Generator{Array{Base.RefValue{Any}, 1}, Base.var"#989#991"}, Int64, Int64})
                                        precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#119#175", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#119#175", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"##edit_abort#113", Any, typeof(REPL.LineEdit.edit_abort), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{REPL.var"#60#66"{REPL.REPLBackendRef}})
precompile(Tuple{typeof(FreeTypeAbstraction.ft_done)})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceImage{ColorTypes.ARGB32}})
precompile(Tuple{typeof(Base.delete!), CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, Makie.Scene, MakieCore.Combined{MakieCore.heatmap, Tuple{Array{Float32, 1}, Array{Float32, 1}, Array{Float32, 2}}}})
precompile(Tuple{typeof(Base.delete!), CairoMakie.Screen{CairoMakie.RenderType(0x00000001)}, Makie.Scene})
precompile(Tuple{typeof(Distributed.finalize_ref), Distributed.RemoteChannel{Base.Channel{Any}}})
precompile(Tuple{typeof(Base.isequal), Distributed.RemoteChannel{Base.Channel{Any}}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Distributed.RemoteChannel{Base.Channel{Any}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Distributed.RemoteChannel{Base.Channel{Any}}, Distributed.RemoteChannel{Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), Distributed.RemoteValue, Symbol})
precompile(Tuple{Base.var"#659#660"{Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.RemoteChannel{Base.Channel{Any}}})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
